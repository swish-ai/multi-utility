##
# _common_job_if: &common_job_if  ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
##
name: Build and Release
on:
  workflow_dispatch: {}
  push:
    branches: ['*']
    tags-ignore:
    - build-*

jobs:
  sast_test:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Sonarqube
      shell: bash
      run: |
        docker run \
          -e SONAR_HOST_URL=${{ secrets.SONAR_HOST_URL }} \
          -e SONAR_LOGIN=${{ secrets.SONAR_LOGIN }} \
          -v $(pwd):/github/workflow \
          --workdir=/github/workflow \
          sonarsource/sonar-scanner-cli:latest \
          -Dsonar.sources=/github/workflow -Dsonar.projectKey=swish-utilities-gh \
          -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300

    - name: Run Whitesource
      shell: bash
      env:
        WS_WSS_URL: https://essentials-saas.whitesourcesoftware.com/agent
        WS_APIKEY: ${{ secrets.WS_APIKEY }}
        WS_USERKEY: ${{ secrets.WS_USERKEY }}
        WS_PRODUCTNAME: WS-CLI
        WS_PROJECTNAME: swish-utilities
        WS_LOG_FILES_LEVEL: debug
        WS_OFFLINE: false
      run: |
        echo "
        -------------------------
          Downloading WhiteSource Unified Agent
        -------------------------"
        curl -s https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar --output /tmp/wss-unified-agent.jar
        echo "current directory = $(pwd)"
        ls
        java -jar /tmp/wss-unified-agent.jar -d ./  -offline false


    # https://github.com/marketplace/actions/slack-notify
    - name: Slack Notification
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_CHANNEL: "#sast-alerts"
        SLACK_USERNAME: "github-actions"

        SLACK_TITLE: Sonarqube Check Failed - ${{ github.repository }}
        SLACK_MESSAGE: see ${{ secrets.SONAR_HOST_URL }}/dashboard?id=swish-utilities-gh
        SLACK_MSG_AUTHOR: "${{ github.repository }}"

        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON_EMOJI: ":woman-raising-hand:"
        


  set_version:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    runs-on: ubuntu-latest
    needs: sast_test
    outputs:
      gitversion: ${{ steps.set-version.outputs.gitversion }}

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: '5.8.1'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.11

    - name: set version
      id: set-version
      run: |
        GITVERSION=${{ steps.gitversion.outputs.fullSemVer }}
        echo "::set-output name=gitversion::${GITVERSION}"
        echo "gitversion=${GITVERSION}" | tee -a $GITHUB_ENV

  build_linux:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: set_version
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{steps.build-pyinstaller.outputs.artifact-path}}
    steps:
    - uses: actions/checkout@v2
    - name: build-pyinstaller
      id: build-pyinstaller
      uses: ./.github/actions/build-pyinstaller
      with:
        sourcename: run.py
        distname: swish-utilities
        os: linux
        version: "${{ needs.set_version.outputs.gitversion }}"

  build_linux_el7:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: set_version
    runs-on: 	ubuntu-latest
    outputs:
      artifact-path: ${{steps.build-pyinstaller.outputs.artifact-path}}
    steps:
    - uses: actions/checkout@v2
    - name: build-pyinstaller
      id: build-pyinstaller
      uses: ./.github/actions/build-pyinstaller
      with:
        sourcename: run.py
        distname: swish-utilities
        os: linux-el7
        version: "${{ needs.set_version.outputs.gitversion }}"

  build_windows:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: set_version
    runs-on: windows-latest
    outputs:
      artifact-path: ${{ steps.build-pyinstaller.outputs.artifact-path}}
    steps:
    - uses: actions/checkout@v2
    - name: build-pyinstaller
      id: build-pyinstaller
      uses: ./.github/actions/build-pyinstaller
      with:
        sourcename: run.py
        distname: swish-utilities.exe
        os: windows
        version: ${{ needs.set_version.outputs.gitversion }}

  build_macos:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: set_version
    runs-on: macos-latest
    outputs:
      artifact-path: ${{ steps.build-pyinstaller.outputs.artifact-path}}
    steps:
    - uses: actions/checkout@v2
    - name: build-pyinstaller
      id: build-pyinstaller
      uses: ./.github/actions/build-pyinstaller
      with:
        sourcename: run.py
        distname: swish-utilities
        os: MacOS
        version: ${{ needs.set_version.outputs.gitversion }}

  release_artifacts:
    if: ${{ ( github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build') || (github.ref  == 'refs/heads/main') || (github.ref  == 'refs/heads/master')) && !contains(github.event.head_commit.message, '#skip-build') }}
    needs: ["set_version", "build_linux", "build_linux_el7", "build_windows", "build_macos"]
    runs-on: ubuntu-latest
    steps:
    - name: download artifacts
      id: download-artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -lR ${{steps.download-artifacts.outputs.download-path}}
    
    - name: Release
      uses: softprops/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ needs.set_version.outputs.gitversion }}
        files: |
          ${{steps.download-artifacts.outputs.download-path}}/${{needs.build_linux.outputs.artifact-path}}
          ${{steps.download-artifacts.outputs.download-path}}/${{needs.build_linux_el7.outputs.artifact-path}}
          ${{steps.download-artifacts.outputs.download-path}}/${{needs.build_windows.outputs.artifact-path}}
          ${{steps.download-artifacts.outputs.download-path}}/${{needs.build_macos.outputs.artifact-path}}
